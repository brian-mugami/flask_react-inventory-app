"""empty message

Revision ID: 6fd2c3bba565
Revises: 
Create Date: 2023-04-06 12:58:02.656794

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6fd2c3bba565'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_name', sa.String(length=80), nullable=False),
    sa.Column('account_description', sa.String(length=256), nullable=True),
    sa.Column('account_type', sa.Enum('cash', 'credit', 'none', name='account_types'), nullable=True),
    sa.Column('account_number', sa.Integer(), nullable=False),
    sa.Column('account_category', sa.String(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('date_created', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_name'),
    sa.UniqueConstraint('account_number')
    )
    op.create_table('lots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('batch', sa.String(length=50), nullable=False),
    sa.Column('lot', sa.String(length=50), nullable=False),
    sa.Column('expiry_date', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('date_created', sa.DateTime(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('batch'),
    sa.UniqueConstraint('lot')
    )
    op.create_table('token_blocklist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('token_blocklist', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_token_blocklist_jti'), ['jti'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=80), nullable=False),
    sa.Column('last_name', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=80), nullable=False),
    sa.Column('password', sa.String(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('date_registered', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('date_created', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('confirmations',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('expire_at', sa.Integer(), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_name', sa.String(length=80), nullable=False),
    sa.Column('customer_number', sa.Integer(), nullable=True),
    sa.Column('customer_phone_no', sa.String(length=80), nullable=True),
    sa.Column('customer_email', sa.String(length=80), nullable=True),
    sa.Column('customer_site', sa.String(length=80), nullable=True),
    sa.Column('customer_bill_to_site', sa.String(length=80), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('date_registered', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('payment_type', sa.Enum('cash', 'credit', 'none', name='payment_type'), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id'),
    sa.UniqueConstraint('customer_email'),
    sa.UniqueConstraint('customer_phone_no')
    )
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_customers_customer_name'), ['customer_name'], unique=True)

    op.create_table('suppliers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('supplier_name', sa.String(length=80), nullable=False),
    sa.Column('supplier_number', sa.Integer(), nullable=False),
    sa.Column('supplier_site', sa.String(length=80), nullable=True),
    sa.Column('supplier_phone_no', sa.String(length=20), nullable=True),
    sa.Column('supplier_email', sa.String(length=80), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('date_registered', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.Column('payment_type', sa.Enum('cash', 'credit', 'none', name='payment_type_suppliers'), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id'),
    sa.UniqueConstraint('supplier_email'),
    sa.UniqueConstraint('supplier_phone_no')
    )
    with op.batch_alter_table('suppliers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_suppliers_supplier_name'), ['supplier_name'], unique=True)

    op.create_table('invoices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_number', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('invoice_number', sa.String(length=256), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('accounted', sa.Enum('fully_accounted', 'partially_accounted', 'not_accounted', name='accounting_status'), nullable=True),
    sa.Column('status', sa.Enum('fully paid', 'partially paid', 'not paid', 'over paid', name='invoice_status'), nullable=True),
    sa.Column('matched_to_lines', sa.Enum('matched', 'unmatched', 'partially matched', name='invoice_matched_types'), nullable=False),
    sa.Column('destination_type', sa.Enum('expense', 'stores', name='destination_types'), nullable=False),
    sa.Column('purchase_type', sa.Enum('cash', 'credit', name='payment_types'), nullable=False),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invoice_number', 'currency', 'supplier_id', name='purchase_unique_constraint')
    )
    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_invoices_invoice_number'), ['invoice_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_invoices_transaction_number'), ['transaction_number'], unique=True)

    op.create_table('items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_image', sa.String(length=50), nullable=False),
    sa.Column('item_name', sa.String(length=80), nullable=False),
    sa.Column('item_number', sa.Integer(), nullable=True),
    sa.Column('item_weight', sa.Float(), nullable=True),
    sa.Column('item_volume', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('date_created', sa.DateTime(), nullable=True),
    sa.Column('date_archived', sa.DateTime(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('date_unarchived', sa.DateTime(), nullable=True),
    sa.Column('price', sa.Float(precision=2), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_items_item_name'), ['item_name'], unique=True)
        batch_op.create_index(batch_op.f('ix_items_item_number'), ['item_number'], unique=True)

    op.create_table('receipts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_number', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('receipt_number', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('amount', sa.Float(precision=4), nullable=True),
    sa.Column('accounted_status', sa.Enum('fully_accounted', 'partially_accounted', 'not_accounted', name='accounting_status'), nullable=True),
    sa.Column('status', sa.Enum('fully paid', 'partially paid', 'not paid', 'over paid', name='invoice_status'), nullable=True),
    sa.Column('sale_type', sa.Enum('cash', 'credit', name='sales_header_types'), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('customer_id', 'currency', 'receipt_number', name='sales_header_constraint')
    )
    with op.batch_alter_table('receipts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_receipts_receipt_number'), ['receipt_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_receipts_transaction_number'), ['transaction_number'], unique=True)

    op.create_table('customer balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('receipt_amount', sa.Float(), nullable=False),
    sa.Column('paid', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('receipt_id', 'currency', 'customer_id')
    )
    op.create_table('customer payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_number', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_description', sa.String(length=256), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('payment_status', sa.Enum('not_paid', 'fully_paid', 'partially_paid', 'over_paid', name='payment_status'), nullable=False),
    sa.Column('receive_account_id', sa.Integer(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.ForeignKeyConstraint(['receive_account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_number')
    )
    op.create_table('expenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Float(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'invoice_id')
    )
    op.create_table('item_lots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('lot_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_number', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_description', sa.String(length=256), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('payment_status', sa.Enum('not paid', 'fully paid', 'partially paid', 'over paid', name='payment_status'), nullable=False),
    sa.Column('pay_account_id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['pay_account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_number')
    )
    op.create_table('purchase accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('purchases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=256), nullable=True),
    sa.Column('item_quantity', sa.Integer(), nullable=False),
    sa.Column('buying_price', sa.Float(precision=4), nullable=False),
    sa.Column('item_cost', sa.Float(precision=2), nullable=False),
    sa.Column('lines_cost', sa.Float(precision=2), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'invoice_id', name='purchase_constraint')
    )
    op.create_table('sales',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('selling_price', sa.Float(precision=4), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'receipt_id', name='sales_lines_constraint')
    )
    op.create_table('sales accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('receipt_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('receipt_id')
    )
    op.create_table('supplier balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('invoice_amount', sa.Float(), nullable=False),
    sa.Column('paid', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('supplier_id', 'currency', 'invoice_id')
    )
    op.create_table('customer payment accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('balance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['customer balances.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['customer payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('inventory balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('sales_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['sales_id'], ['sales.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'invoice_id')
    )
    op.create_table('supplier payment accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('balance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['supplier balances.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('supplier payment accounting')
    op.drop_table('inventory balances')
    op.drop_table('customer payment accounting')
    op.drop_table('supplier balances')
    op.drop_table('sales accounting')
    op.drop_table('sales')
    op.drop_table('purchases')
    op.drop_table('purchase accounting')
    op.drop_table('payments')
    op.drop_table('item_lots')
    op.drop_table('expenses')
    op.drop_table('customer payments')
    op.drop_table('customer balances')
    with op.batch_alter_table('receipts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_receipts_transaction_number'))
        batch_op.drop_index(batch_op.f('ix_receipts_receipt_number'))

    op.drop_table('receipts')
    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_items_item_number'))
        batch_op.drop_index(batch_op.f('ix_items_item_name'))

    op.drop_table('items')
    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_invoices_transaction_number'))
        batch_op.drop_index(batch_op.f('ix_invoices_invoice_number'))

    op.drop_table('invoices')
    with op.batch_alter_table('suppliers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_suppliers_supplier_name'))

    op.drop_table('suppliers')
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_customers_customer_name'))

    op.drop_table('customers')
    op.drop_table('confirmations')
    op.drop_table('categories')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('token_blocklist', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_token_blocklist_jti'))

    op.drop_table('token_blocklist')
    op.drop_table('lots')
    op.drop_table('accounts')
    # ### end Alembic commands ###
