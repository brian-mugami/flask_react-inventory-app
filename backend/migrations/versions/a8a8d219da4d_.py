"""empty message

Revision ID: a8a8d219da4d
Revises: cea31bf926ab
Create Date: 2023-04-13 11:13:41.798262

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a8a8d219da4d'
down_revision = 'cea31bf926ab'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customer_balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('receipt_amount', sa.Float(), nullable=False),
    sa.Column('paid', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('receipt_id', 'currency', 'customer_id')
    )
    op.create_table('customer_payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_number', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('payment_description', sa.String(length=256), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('payment_status', sa.Enum('not_paid', 'fully_paid', 'partially_paid', 'over_paid', name='customer_payment_status'), nullable=False),
    sa.Column('receive_account_id', sa.Integer(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ),
    sa.ForeignKeyConstraint(['receive_account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_number')
    )
    op.create_table('inventory_balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('receipt_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'invoice_id', 'receipt_id')
    )
    op.create_table('purchase_accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sales_accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('receipt_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('receipt_id')
    )
    op.create_table('supplier_balances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('invoice_amount', sa.Float(), nullable=False),
    sa.Column('paid', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('supplier_id', 'currency', 'invoice_id')
    )
    op.create_table('customer_payment_accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('balance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['customer_balances.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['customer_payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('supplier_payment_accounting',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('credit_amount', sa.Float(), nullable=True),
    sa.Column('debit_amount', sa.Float(), nullable=True),
    sa.Column('update_date', sa.DateTime(), nullable=True),
    sa.Column('credit_account_id', sa.Integer(), nullable=True),
    sa.Column('debit_account_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('balance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['supplier_balances.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('purchase accounting')
    op.drop_table('sales accounting')
    op.execute('DROP TABLE "customer payments" CASCADE;')
    op.drop_table('supplier payment accounting')
    op.drop_table('customer payment accounting')
    op.drop_table('supplier balances')
    op.drop_table('customer balances')
    op.drop_table('inventory balances')
    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.alter_column('price',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=2),
               existing_nullable=False)

    with op.batch_alter_table('purchases', schema=None) as batch_op:
        batch_op.alter_column('buying_price',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=4),
               existing_nullable=False)
        batch_op.alter_column('lines_cost',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=2),
               existing_nullable=False)

    with op.batch_alter_table('receipts', schema=None) as batch_op:
        batch_op.alter_column('amount',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=4),
               existing_nullable=True)

    with op.batch_alter_table('sales', schema=None) as batch_op:
        batch_op.alter_column('selling_price',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=4),
               existing_nullable=False)
        batch_op.alter_column('item_cost',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=4),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sales', schema=None) as batch_op:
        batch_op.alter_column('item_cost',
               existing_type=sa.Float(precision=4),
               type_=sa.REAL(),
               existing_nullable=False)
        batch_op.alter_column('selling_price',
               existing_type=sa.Float(precision=4),
               type_=sa.REAL(),
               existing_nullable=False)

    with op.batch_alter_table('receipts', schema=None) as batch_op:
        batch_op.alter_column('amount',
               existing_type=sa.Float(precision=4),
               type_=sa.REAL(),
               existing_nullable=True)

    with op.batch_alter_table('purchases', schema=None) as batch_op:
        batch_op.alter_column('lines_cost',
               existing_type=sa.Float(precision=2),
               type_=sa.REAL(),
               existing_nullable=False)
        batch_op.alter_column('buying_price',
               existing_type=sa.Float(precision=4),
               type_=sa.REAL(),
               existing_nullable=False)

    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.alter_column('price',
               existing_type=sa.Float(precision=2),
               type_=sa.REAL(),
               existing_nullable=False)

    op.create_table('inventory balances',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"inventory balances_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit_cost', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('receipt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='inventory balances_invoice_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], name='inventory balances_item_id_fkey'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], name='inventory balances_receipt_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='inventory balances_pkey'),
    sa.UniqueConstraint('item_id', 'invoice_id', 'receipt_id', name='inventory balances_item_id_invoice_id_receipt_id_key')
    )
    op.create_table('customer balances',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"customer balances_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('receipt_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('paid', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('balance', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receipt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='customer balances_customer_id_fkey'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], name='customer balances_receipt_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customer balances_pkey'),
    sa.UniqueConstraint('receipt_id', 'currency', 'customer_id', name='customer balances_receipt_id_currency_customer_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('supplier balances',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"supplier balances_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('invoice_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('paid', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('balance', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='supplier balances_invoice_id_fkey'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='supplier balances_supplier_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='supplier balances_pkey'),
    sa.UniqueConstraint('supplier_id', 'currency', 'invoice_id', name='supplier balances_supplier_id_currency_invoice_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('customer payment accounting',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('debit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('debit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('balance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['customer balances.id'], name='customer payment accounting_balance_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], name='customer payment accounting_credit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], name='customer payment accounting_debit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['customer payments.id'], name='customer payment accounting_payment_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='customer payment accounting_pkey')
    )
    op.create_table('supplier payment accounting',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('debit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('debit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('balance_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['balance_id'], ['supplier balances.id'], name='supplier payment accounting_balance_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], name='supplier payment accounting_credit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], name='supplier payment accounting_debit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name='supplier payment accounting_payment_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier payment accounting_pkey')
    )
    op.create_table('customer payments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"customer payments_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('transaction_number', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('payment_description', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('payment_status', postgresql.ENUM('not_paid', 'fully_paid', 'partially_paid', 'over_paid', name='payment_status'), autoincrement=False, nullable=False),
    sa.Column('receive_account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('receipt_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], name='customer payments_receipt_id_fkey'),
    sa.ForeignKeyConstraint(['receive_account_id'], ['accounts.id'], name='customer payments_receive_account_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customer payments_pkey'),
    sa.UniqueConstraint('transaction_number', name='customer payments_transaction_number_key')
    )
    op.create_table('sales accounting',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('debit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('debit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('receipt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], name='sales accounting_credit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], name='sales accounting_debit_account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], name='sales accounting_receipt_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sales accounting_pkey'),
    sa.UniqueConstraint('receipt_id', name='sales accounting_receipt_id_key')
    )
    op.create_table('purchase accounting',
    sa.Column('id', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('debit_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('update_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('credit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('debit_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['credit_account_id'], ['accounts.id'], name='purchase accounting_credit_account_id_fkey'),
    sa.ForeignKeyConstraint(['debit_account_id'], ['accounts.id'], name='purchase accounting_debit_account_id_fkey'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='purchase accounting_invoice_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='purchase accounting_pkey')
    )
    op.drop_table('supplier_payment_accounting')
    op.drop_table('customer_payment_accounting')
    op.drop_table('supplier_balances')
    op.drop_table('sales_accounting')
    op.drop_table('purchase_accounting')
    op.drop_table('inventory_balances')
    op.drop_table('customer_payments')
    op.drop_table('customer_balances')
    # ### end Alembic commands ###
